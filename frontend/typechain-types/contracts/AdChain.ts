/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AdChain {
  export type AdStruct = {
    advertiser: AddressLike;
    budget: BigNumberish;
    costPerClick: BigNumberish;
    ipfsAdData: string;
    displayImage: string;
    title: string;
    description: string;
    destinationUrl: string;
    placementSize: string;
    clicks: BigNumberish;
    active: boolean;
    expiration: BigNumberish;
  };

  export type AdStructOutput = [
    advertiser: string,
    budget: bigint,
    costPerClick: bigint,
    ipfsAdData: string,
    displayImage: string,
    title: string,
    description: string,
    destinationUrl: string,
    placementSize: string,
    clicks: bigint,
    active: boolean,
    expiration: bigint
  ] & {
    advertiser: string;
    budget: bigint;
    costPerClick: bigint;
    ipfsAdData: string;
    displayImage: string;
    title: string;
    description: string;
    destinationUrl: string;
    placementSize: string;
    clicks: bigint;
    active: boolean;
    expiration: bigint;
  };
}

export interface AdChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HALF_PAGE_AD"
      | "LARGE_RECTANGLE"
      | "LEADERBOARD"
      | "MEDIUM_RECTANGLE"
      | "MIN_WITHDRAW"
      | "SKYSCRAPER"
      | "USDT_ADDRESS"
      | "adCounter"
      | "ads"
      | "createAd"
      | "editAd"
      | "fundAd"
      | "getActiveAds"
      | "owner"
      | "publisherEarnings"
      | "recordClick"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdCreated"
      | "AdEdited"
      | "AdFunded"
      | "ClickRecorded"
      | "OwnershipTransferred"
      | "Payout"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HALF_PAGE_AD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LARGE_RECTANGLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEADERBOARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_RECTANGLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SKYSCRAPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "adCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "ads", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createAd",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editAd",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publisherEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordClick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "HALF_PAGE_AD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LARGE_RECTANGLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEADERBOARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_RECTANGLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SKYSCRAPER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ads", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createAd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editAd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publisherEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordClick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
}

export namespace AdCreatedEvent {
  export type InputTuple = [adId: BigNumberish, advertiser: AddressLike];
  export type OutputTuple = [adId: bigint, advertiser: string];
  export interface OutputObject {
    adId: bigint;
    advertiser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdEditedEvent {
  export type InputTuple = [adId: BigNumberish, advertiser: AddressLike];
  export type OutputTuple = [adId: bigint, advertiser: string];
  export interface OutputObject {
    adId: bigint;
    advertiser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdFundedEvent {
  export type InputTuple = [adId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [adId: bigint, amount: bigint];
  export interface OutputObject {
    adId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClickRecordedEvent {
  export type InputTuple = [adId: BigNumberish, publisher: AddressLike];
  export type OutputTuple = [adId: bigint, publisher: string];
  export interface OutputObject {
    adId: bigint;
    publisher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutEvent {
  export type InputTuple = [publisher: AddressLike, amount: BigNumberish];
  export type OutputTuple = [publisher: string, amount: bigint];
  export interface OutputObject {
    publisher: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdChain extends BaseContract {
  connect(runner?: ContractRunner | null): AdChain;
  waitForDeployment(): Promise<this>;

  interface: AdChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HALF_PAGE_AD: TypedContractMethod<[], [string], "view">;

  LARGE_RECTANGLE: TypedContractMethod<[], [string], "view">;

  LEADERBOARD: TypedContractMethod<[], [string], "view">;

  MEDIUM_RECTANGLE: TypedContractMethod<[], [string], "view">;

  MIN_WITHDRAW: TypedContractMethod<[], [bigint], "view">;

  SKYSCRAPER: TypedContractMethod<[], [string], "view">;

  USDT_ADDRESS: TypedContractMethod<[], [string], "view">;

  adCounter: TypedContractMethod<[], [bigint], "view">;

  ads: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        advertiser: string;
        budget: bigint;
        costPerClick: bigint;
        ipfsAdData: string;
        displayImage: string;
        title: string;
        description: string;
        destinationUrl: string;
        placementSize: string;
        clicks: bigint;
        active: boolean;
        expiration: bigint;
      }
    ],
    "view"
  >;

  createAd: TypedContractMethod<
    [
      _costPerClick: BigNumberish,
      _ipfsAdData: string,
      _displayImage: string,
      _title: string,
      _description: string,
      _destinationUrl: string,
      _placementSize: string,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  editAd: TypedContractMethod<
    [
      _adId: BigNumberish,
      _costPerClick: BigNumberish,
      _ipfsAdData: string,
      _displayImage: string,
      _title: string,
      _description: string,
      _destinationUrl: string,
      _placementSize: string
    ],
    [void],
    "nonpayable"
  >;

  fundAd: TypedContractMethod<
    [_adId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveAds: TypedContractMethod<
    [_placementSize: string],
    [AdChain.AdStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  publisherEarnings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  recordClick: TypedContractMethod<[_adId: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawEarnings: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HALF_PAGE_AD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LARGE_RECTANGLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LEADERBOARD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MEDIUM_RECTANGLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_WITHDRAW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SKYSCRAPER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDT_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ads"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        advertiser: string;
        budget: bigint;
        costPerClick: bigint;
        ipfsAdData: string;
        displayImage: string;
        title: string;
        description: string;
        destinationUrl: string;
        placementSize: string;
        clicks: bigint;
        active: boolean;
        expiration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAd"
  ): TypedContractMethod<
    [
      _costPerClick: BigNumberish,
      _ipfsAdData: string,
      _displayImage: string,
      _title: string,
      _description: string,
      _destinationUrl: string,
      _placementSize: string,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editAd"
  ): TypedContractMethod<
    [
      _adId: BigNumberish,
      _costPerClick: BigNumberish,
      _ipfsAdData: string,
      _displayImage: string,
      _title: string,
      _description: string,
      _destinationUrl: string,
      _placementSize: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundAd"
  ): TypedContractMethod<
    [_adId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveAds"
  ): TypedContractMethod<
    [_placementSize: string],
    [AdChain.AdStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publisherEarnings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordClick"
  ): TypedContractMethod<[_adId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdCreated"
  ): TypedContractEvent<
    AdCreatedEvent.InputTuple,
    AdCreatedEvent.OutputTuple,
    AdCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AdEdited"
  ): TypedContractEvent<
    AdEditedEvent.InputTuple,
    AdEditedEvent.OutputTuple,
    AdEditedEvent.OutputObject
  >;
  getEvent(
    key: "AdFunded"
  ): TypedContractEvent<
    AdFundedEvent.InputTuple,
    AdFundedEvent.OutputTuple,
    AdFundedEvent.OutputObject
  >;
  getEvent(
    key: "ClickRecorded"
  ): TypedContractEvent<
    ClickRecordedEvent.InputTuple,
    ClickRecordedEvent.OutputTuple,
    ClickRecordedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Payout"
  ): TypedContractEvent<
    PayoutEvent.InputTuple,
    PayoutEvent.OutputTuple,
    PayoutEvent.OutputObject
  >;

  filters: {
    "AdCreated(uint256,address)": TypedContractEvent<
      AdCreatedEvent.InputTuple,
      AdCreatedEvent.OutputTuple,
      AdCreatedEvent.OutputObject
    >;
    AdCreated: TypedContractEvent<
      AdCreatedEvent.InputTuple,
      AdCreatedEvent.OutputTuple,
      AdCreatedEvent.OutputObject
    >;

    "AdEdited(uint256,address)": TypedContractEvent<
      AdEditedEvent.InputTuple,
      AdEditedEvent.OutputTuple,
      AdEditedEvent.OutputObject
    >;
    AdEdited: TypedContractEvent<
      AdEditedEvent.InputTuple,
      AdEditedEvent.OutputTuple,
      AdEditedEvent.OutputObject
    >;

    "AdFunded(uint256,uint256)": TypedContractEvent<
      AdFundedEvent.InputTuple,
      AdFundedEvent.OutputTuple,
      AdFundedEvent.OutputObject
    >;
    AdFunded: TypedContractEvent<
      AdFundedEvent.InputTuple,
      AdFundedEvent.OutputTuple,
      AdFundedEvent.OutputObject
    >;

    "ClickRecorded(uint256,address)": TypedContractEvent<
      ClickRecordedEvent.InputTuple,
      ClickRecordedEvent.OutputTuple,
      ClickRecordedEvent.OutputObject
    >;
    ClickRecorded: TypedContractEvent<
      ClickRecordedEvent.InputTuple,
      ClickRecordedEvent.OutputTuple,
      ClickRecordedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Payout(address,uint256)": TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;
    Payout: TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;
  };
}
